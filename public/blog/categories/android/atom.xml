<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android | 成长日志]]></title>
  <link href="http://ghdawn.github.com/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://ghdawn.github.com/"/>
  <updated>2012-12-02T21:48:10+08:00</updated>
  <id>http://ghdawn.github.com/</id>
  <author>
    <name><![CDATA[清风未明]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用单片机Arduino(AVR)与Android设备通讯]]></title>
    <link href="http://ghdawn.github.com/blog/2012/05/android-arduino/"/>
    <updated>2012-05-04T21:57:00+08:00</updated>
    <id>http://ghdawn.github.com/blog/2012/05/android-arduino</id>
    <content type="html"><![CDATA[<h3 id="section">简述需求</h3>
<p>现在的Android设备，像手机，平板等，有很多的资源，比如照相机，音箱等,同时CPU已经很好，运算能力很强。功能十分丰富，但是必须得人手操控才能使用。这么丰富的资源，如果能自动做点事情，或者作为一个控制核心控制其它的东西就更好了，所以Google官方提供了一种方法，将Android设备按附件模式与一个有<a href="http://baike.baidu.com/view/1402520.htm?fromTaglist">USB Host</a>的设备相连，两者通过USB接口相连传输数据，从而实现通过单片机操控手机。（<a href="http://zh.wikipedia.org/zh-cn/USB">USB</a>是主从结构的总线，这里要求Android设备作为从机，单片机作为主机，而一般的开发板附带的usb口都是client，如果需要做这个实验，则需要买<a href="http://item.taobao.com/item.htm?id=12892248805">有USB Host的开发板</a>，或者买专门的 USB host shield模块放在开发板上。）</p>

<p>在这里，Google要求Android平台的版本至少为2.3.3，单片机要求实现了<em>Android Accessory Protocol</em>协议。其中Google官方支持了一个开源硬件平台<a href="http://www.arduino.cc/">Arduino</a>。现阶段，Android只能支持一个USB设备，不过能满足大部分需求了。</p>

<p>Google官方提供了一个简洁的教程（<a href="http://developer.android.com/guide/topics/usb/adk.html">Arduino</a>部分，与<a href="http://developer.android.com/guide/topics/usb/accessory.html">Android</a>部分，以及一份代码示例（包括Android与Arduino部分，在对应的网页里下）。但是教程过于简洁而示例过于复杂：直接按照教程做，很多地方无从下手。按照代码改，代码结构又过于复杂，依然不好下手。于是我在这里耽误了一天多的时间。</p>

<h3 id="arduino">Arduino部分</h3>
<ol>
  <li>在<a href="http://www.arduino.cc/">Arduino</a>下载最新的IDE，它是用JAVA开发的，跨平台。同时几乎所有底层的驱动全部写好，开发的时候只要调用即可，完全感觉不到是在开发单片机，实在很爽。</li>
  <li>下载<a href="https://dl-ssl.google.com/android/adk/adk_release_0512.zip">Google 提供的协议实现代码</a>。解压出来后，将<em>firmware/arduino_libs/</em>下的<em>AndroidAccessory</em>和<em>USB_Host_Shield</em>复制到<em>Arduino IDE</em>的<em>libraries</em>目录下。这两个分别是Android附件协议的实现和USB的驱动。</li>
  <li>如果按照教程，现在只需要打开<em>firmware/demokit/demokit.pde</em>并烧写进开发板，就可以和教程配套的Android程序进行通讯并控制电机之类的驱动了。</li>
  <li>但是自己做开发的话就不要用上面的代码了，太复杂太麻烦。在IDE里新建一个文件，包含<em>USB</em>驱动和<em>AndroidAccessory</em>的头文件，并新建一个<em>AndroidAccessory</em>对象，比如叫acc。在<em>setup()</em>函数中，调用acc.powerOn()方法，即可开始试探链接Android设备。</li>
  <li>在我的应用中，我需要做的是把Android设备中计算的结果以串口的形式发给飞控模块，所以我只需要不断的把Android设备发送来的数据发给串口，再把串口接受到的数据发给Android设备。于是，代码如下：</li>
</ol>

<p>{% codeblock lang:cpp %}</p>

<h1 id="include-usbh">include <Usb.h /></h1>
<p>#include <AndroidAccessory.h /></p>

<p>AndroidAccessory acc(“BuaaITR”,
		     “Demo”,
		     “DemoKit Arduino Board”,
		     “1.0”,
		     “http://www.android.com”,
		     “0000000012345678”);</p>

<p>void setup()
{
	Serial.begin(115200);
	Serial.print(“\r\nStart”);</p>

<pre><code>acc.powerOn(); }
</code></pre>

<p>void loop()
{</p>

<pre><code>byte msg[1024];

if (acc.isConnected()) 
    {
            while(Serial.available()&gt;0)
            {
              msg[0]=Serial.read();
              acc.write(msg,1);
            }
            int len = acc.read(msg, sizeof(msg), 1);
            if (len &gt; 0) 
            {
              Serial.write(msg,len);
            }
    }
delay(200); }
</code></pre>

<p>{% endcodeblock%}</p>

<h5 id="section-1">一些解释</h5>
<p>按照这样的方法，单片机这部分就很容易能搞定了，只要Android程序写好了，两个就能匹配工作了。</p>

<ul>
  <li>Arduino简化了开发流程，去掉了主函数，只留下 <em>setup()</em>作为初始化，<em>loop()</em>不断循环。所以把初始化的部分写在<em>setup()</em>里，工作的部分写在<em>loop()</em>中。  </li>
  <li><em>AndroidAccessory</em>对象的构造函数有6个参数，分别为：设备制造商，设备模型，设备描述，设备版本，网址和序列号。其中制造商，模型和版本必须与Android设备上的软件匹配。即开发Android设备上运行的软件时，也需要制定这三个参数，只有这三个参数相同的设备才能互相连接。  </li>
  <li>调用<em>acc.powerOn();</em>来使单片机开始工作  </li>
  <li>单片机与Android设备不一定会匹配，所以需要<em>acc.isConnected()</em>判断是否已经成功的连接。  </li>
  <li>读写方法分别为<code>acc.write(char* msg,int length)</code> 和<code>acc.read(char* msg,int length ,int nakLimit)</code>。其中msg和length分别为存放数据的数组和期望读写的数据长度。读取函数的第三个参数<em>nakLimit</em>，目前我在网上还没找到有人知道是做什么用的，反正设为1就能用。   </li>
</ul>

<h3 id="android">Android部分</h3>
<p>首先声明，这里我是参考了Google的官方文档，同时在Google给的示例代码中改成的，代码已经十分精简，可以直接修改以完成所需的任务。如果有时间，完全可以读Google的代码，从那一大堆代码里修改。<br />
操作USB的时候，SDK版本为<em>2.3.3，即API 10</em>时是一种操作，版本为那之上的是另一种操作。<em>API 10</em>需要装<a href="http://code.google.com/android/add-ons/google-apis/installing.html">add-on library</a>，我用的是<em>API 10</em>。装好之后，在项目属性中，点选<em>Android</em>，把<em>Build Target</em>改为<em>Google APIs</em>。</p>

<p>要想使<em>Accessory</em>工作，需要在<em>AndroidManifest.xml</em>中声明支持<em>UsbManager.ACTION_USB_ACCESSORY_DETACHED</em>，并添加一个过滤器，来过滤设备。如下：
{%codeblock lang:xml%}
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android" package="me.ghdawn" android:versionCode="1" android:versionName="1.0" /></p>

<pre><code>&lt;uses-feature android:name="android.hardware.usb.accessory" /&gt;

&lt;uses-sdk android:minSdkVersion="10" /&gt;

&lt;application
    android:icon="@drawable/ic_launcher"
    android:label="@string/app_name" &gt;
    &lt;uses-library android:name="com.android.future.usb.accessory" /&gt;

    &lt;activity
        android:name=".UsbAccActivity"
        android:label="@string/app_name" &gt;
        &lt;intent-filter&gt;
            &lt;action android:name="android.intent.action.MAIN" /&gt;

            &lt;category android:name="android.intent.category.LAUNCHER" /&gt;
        &lt;/intent-filter&gt;
        &lt;intent-filter&gt;
            &lt;action android:name="android.hardware.usb.action.USB_ACCESSORY_ATTACHED" /&gt;
        &lt;/intent-filter&gt;

        &lt;meta-data
            android:name="android.hardware.usb.action.USB_ACCESSORY_ATTACHED"
            android:resource="@xml/accessory_filter" /&gt;
    &lt;/activity&gt;
&lt;/application&gt;
</code></pre>

<p>&lt;/manifest&gt;
{%endcodeblock%}
#####一些说明
- <em>API 10</em>使用的是<em>Addon library</em>,需要注明：<em><uses-library android:name="com.android.future.usb.accessory" /></em><br />
- 要说明支持<em>USB_ACCESSORY_ATTACHED</em>模式，所以加上</p>

<pre><code>    &lt;intent-filter&gt;
            &lt;action android:name="android.hardware.usb.action.USB_ACCESSORY_ATTACHED" /&gt;
    &lt;/intent-filter&gt;
</code></pre>

<ul>
  <li>
    <p>可能会有很多USB接口的设备，所以我们还需要筛选一下此程序能接的单片机，所以增加一个<em>accessory_filter.xml</em>来筛选设备。在<em>res</em>文件夹下新建文件夹<em>xml</em>，在其中新建文件<em>accessory_filter.xml</em>，在这里增加需要的单片机的条件。</p>

    <pre><code>   &lt;meta-data
          android:name="android.hardware.usb.action.USB_ACCESSORY_ATTACHED"
          android:resource="@xml/accessory_filter" /&gt;
</code></pre>
  </li>
</ul>

<p>上面这段代码就是注册这个筛选器的。下面这段就是筛选器的内容。还记得上面的<em>Arduino</em>部分中，新建的<em>AndroidAccessory</em>对象吗？那里的第1，2，4个参数正是这里筛选的参数。只有这几个参数匹配的设备才能建立连接。当然，这里筛选条件是可以选的，那几个参数都可以作为筛选条件，只要加在下面就可以。</p>

<p>{%codeblock lang:xml%}
<?xml version="1.0" encoding="utf-8"?></p>

<resources>
    <usb-accessory manufacturer="BuaaITR" model="Demo" version="1.0" />
</resources>

<p>{%endcodeblock%}</p>

<p>注：下文的所有<em>设备</em>一词，均指代<em>Arduino设备</em>，程序则代表<em>Android设备</em>。<br />
这样，就可以开始写代码了。首先需要一个<em>UsbManager</em>对象来管理USB设备，需要一个广播接收器，当系统有广播时，来判断是否为USB附件，并询问是否提供权限。广播的过滤器使用<em>UsbManager.ACTION_USB_ACCESSORY_DETACHED</em>作为<em>action</em>。当接受到一个满足过滤条件的广播时，并且获得了访问的权限，就可以获得该设备的信息，并进行读写了。</p>

<p>广播接收器的代码：
{%codeblock lang:java%}
private final BroadcastReceiver mUsbReceiver = new BroadcastReceiver()
	{
		@Override
		public void onReceive(Context context, Intent intent)
		{
			String action = intent.getAction();
			if (ACTION_USB_PERMISSION.equals(action))
			{
				synchronized (this)
				{
					UsbAccessory accessory = UsbManager.getAccessory(intent);
					if (intent.getBooleanExtra(
					        UsbManager.EXTRA_PERMISSION_GRANTED, false))
					{
						openAccessory(accessory);
					}
					else
					{
						Log.d(TAG, “permission denied for accessory “
						        + accessory);
					}
					mPermissionRequestPending = false;
				}
			}
			else if (UsbManager.ACTION_USB_ACCESSORY_DETACHED.equals(action))
			{
				UsbAccessory accessory = UsbManager.getAccessory(intent);
				if (accessory != null &amp;&amp; accessory.equals(mAccessory))
				{
					closeAccessory();
				}
			}
		}
	};
{%endcodeblock%}</p>

<p>建立连接：</p>

<p>{%codeblock lang:java%}
	private void openAccessory(UsbAccessory accessory)
	{
		mFileDescriptor = mUsbManager.openAccessory(accessory);
		if (mFileDescriptor != null)
		{
			mAccessory = accessory;
			//获得该设备的输入输出流
			FileDescriptor fd = mFileDescriptor.getFileDescriptor();
			mInputStream = new FileInputStream(fd);
			mOutputStream = new FileOutputStream(fd);
			//是否能对设备进行读写操作
			canIO = true;
			//定时查询是否有数据可以接收
			timer.scheduleAtFixedRate(new TimerTask()
			{
				@Override
				public void run()
				{
					// TODO Auto-generated method stub
					int length = 0;
					byte[] buffer = new byte[maxBuffer];
					try
					{
						//如果有数据来，则接受数据。
						if(mInputStream.available()&gt;0)
						{
							length=mInputStream.read(buffer);
							//处理接收到的数据，按需要自己改。
							usbuart.onReceive(buffer);
						}</p>

<pre><code>				}
				catch (IOException e)
				{
					// tbhello.setText("IO error\n" + e.getMessage());

				}

			}
			
		}, 0, delaytime);
		Log.d(TAG, "accessory opened");

	}
	else
	{
		Log.d(TAG, "accessory open fail");
	}
} {%endcodeblock%} 这样，大部分功能就实现完了，现在需要注册广播接收器，并让程序监视USB设备。
</code></pre>

<p>{%codeblock lang:java%}
	@Override
	public void onCreate(Bundle savedInstanceState)
	{
		super.onCreate(savedInstanceState);
		//使用add-on library时，必须这样定义usbmanager对象
		mUsbManager = UsbManager.getInstance(this);
		mPermissionIntent = PendingIntent.getBroadcast(this, 0, new Intent(
		        ACTION_USB_PERMISSION), 0);
		//注册接收器和过滤器
		IntentFilter filter = new IntentFilter(ACTION_USB_PERMISSION);
		filter.addAction(UsbManager.ACTION_USB_ACCESSORY_DETACHED);
		registerReceiver(mUsbReceiver, filter);</p>

<pre><code>	setContentView(R.layout.main);

}

@Override
public void onResume()
{
	super.onResume();

	Intent intent = getIntent();
	//如果已经打开了一个设备，就不再查询
	if (mInputStream != null &amp;&amp; mOutputStream != null)
	{
		return;
	}
	//只能支持一个设备，如果发现了一个USB设备并且有权限访问，就打开
	UsbAccessory[] accessories = mUsbManager.getAccessoryList();
	UsbAccessory accessory = (accessories == null ? null : accessories[0]);
	if (accessory != null)
	{
		if (mUsbManager.hasPermission(accessory))
		{
			openAccessory(accessory);
		}
		
	}
	else
	{
		Log.d(TAG, "mAccessory is null");
	}
}

@Override
public void onPause()
{
	super.onPause();
	closeAccessory();
}

@Override
public void onDestroy()
{
	unregisterReceiver(mUsbReceiver);
	super.onDestroy();
} {%endcodeblock%}
</code></pre>

<p>如果需要发送数据，就这样：
{%codeblock lang:java%}
    public void send(byte[] data)
    {
	    if(canIO)
	    {
	    	try
            {
	            mOutputStream.write(data);
            }
            catch (IOException e)
            {	
	            // TODO Auto-generated catch block
	            e.printStackTrace();
            }
	    }
    }
    {%endcodeblock%}<br />
用到的对象如下：
{%codeblock lang:java%}
private static final String TAG = “DemoKit”;</p>

<pre><code>private static final String ACTION_USB_PERMISSION = "com.google.android.DemoKit.action.USB_PERMISSION";

private UsbManager mUsbManager;
private PendingIntent mPermissionIntent;


private int maxBuffer=1024;
private boolean canIO = false;
UsbAccessory mAccessory;
ParcelFileDescriptor mFileDescriptor;
FileInputStream mInputStream;
FileOutputStream mOutputStream;

Timer timer = new Timer(); {%endcodeblock%}  
</code></pre>

<p>如果步骤没出错的话，至此，把Arduino开发板插到Android设备上，应该就能互相传数据了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[学习Android开发-用canvas绘图]]></title>
    <link href="http://ghdawn.github.com/blog/2012/04/study-android-2/"/>
    <updated>2012-04-06T15:32:00+08:00</updated>
    <id>http://ghdawn.github.com/blog/2012/04/study-android-2</id>
    <content type="html"><![CDATA[<p>接着<a href="/blog/2012/03/15/study-android-1/">上一篇</a>所说，我们已经从SVG文件中得到了基本图形的定义信息，如圆的圆心坐标与半径，直线段的端点坐标，所以可以开始绘图了。我的想法是，一张SVG图片解析完成后，把所有图片画进一个<em>Bitmap</em>里，这样以后所有的对图片的操作都可以用<em>Android</em>自带的方法操作，应该会简单一些。<em>Bitmap</em>对象需要用工厂方法来创建。创建好空的bitmap后，将它传给一个<em>Canvas</em>对象，即可以通过<em>canvas</em>的方法，在该bitmap上绘制图形。如下：</p>

<pre><code>    bitmap = Bitmap.createBitmap(1024, 768, Config.ALPHA_8);
    Canvas canvas = new Canvas(bitmap);
</code></pre>

<h4 id="section">画直线和圆</h4>

<p><em>canvas</em>绘制直线的方法调用方法如下：</p>

<pre><code>    canvas.drawLine(x1, y1, x2, y2, paint);
</code></pre>

<p>其中<code>(x1,y1)</code>,<code>(x2,y2)</code>为直线的起始，终止点坐标，<em>paint</em>为画笔类型<em>Paint</em>的对象，画出来图形的样式由它的参数来决定。这里我只在其中设置了颜色为蓝色。</p>

<pre><code>    paint.setColor(Color.BLUE);
</code></pre>

<p>绘制圆的方法如下：</p>

<pre><code>    canvas.drawCircle(cx, cy, r, paint);
</code></pre>

<p>其中<code>(cx,cy)</code>为圆心坐标，<code>r</code>为半径。这样画出来的圆是实心的，如果想要空心圆，则需要设置<em>paint</em>的类型：</p>

<pre><code>    paint.setStyle(Style.STROKE); 写全一个就是如下： {% codeblock lang:java %}
public void draw(Canvas canvas)
{
	// TODO Auto-generated method stub
	Paint paint = new Paint();
	paint.setStyle(Style.STROKE);
	paint.setColor(Color.BLACK);
	canvas.drawCircle(_cx, _cy, _r, paint);
	
} {% endcodeblock %}
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[学习Android开发-SVG文件解析]]></title>
    <link href="http://ghdawn.github.com/blog/2012/03/study-android-1/"/>
    <updated>2012-03-15T18:57:00+08:00</updated>
    <id>http://ghdawn.github.com/blog/2012/03/study-android-1</id>
    <content type="html"><![CDATA[<p>我毕业设计的题目是在安卓平台上开发一个工程图的浏览器。需要从服务器中读取用户选择的图纸，并在终端上显示。我所接收到的图纸的类型是SVG格式。</p>

<p>Android并没有直接支持渲染SVG格式，而CodeProject和GitHub上的那些SVG库又都很不靠谱，所以我需要自己解析并绘图。SVG格式的图片是基于XML的，所以图片相当于一个文档，可以用解析XML文档的方式来解析图片。关于SVG图片的详情请见<a href="http://www.w3school.com.cn/svg/svg_intro.asp">这里</a></p>

<p>由于SVG是基于XML的，即需要解析的是一个XML文件，所以需要一个<em>Document</em>对象。这里我使用了JAVA自带的DOM（Document Object Model）方式解析，所以需要一个<em>DocumentBuilder</em>对象来从XML文件中获取DOM文档的实例,然后将解析出的文档传给<em>Document</em>对象。而这个<em>DocumentBuilder</em>对象的初始化又需要用<em>DocumentBuilderFactory</em>的工厂方法。所以初始化的代码如下：</p>

<p>{%codeblock lang:csharp %}
private InputStream _svgFile;
Document doc;
NodeList nList;
public SVGParase(InputStream svgFile) throws SAXException, IOException
{
	_svgFile=svgFile;
	DocumentBuilderFactory dbFactory = DocumentBuilderFactory
	        .newInstance();
	DocumentBuilder dBuilder;
       try
       {
        dBuilder = dbFactory.newDocumentBuilder();
        doc = dBuilder.parse(_svgFile);      <br />
	doc.getDocumentElement().normalize();
       }
       catch (ParserConfigurationException e)
       {
        // TODO Auto-generated catch block
        e.printStackTrace();
       }
}
{% endcodeblock %}</p>

<p>SVG中图形的形式主要有直线段，圆，椭圆，文本等，标签名为polyline，circile，eclipse，text等。所以要解析某一种图形，先查找所有拥有该标签的节点。下面以圆为例：
首先查找有circle标签的结点，其中查到的每一个结点如果类型为element，则它代表了一个圆。每一个圆通过 <em>圆心坐标和半径</em> 三个属性来定义，所以在其中查找属性：<em>cx</em>,<em>cy</em>,<em>r</em>即为圆的参数。代码如下：
{%codeblock lang:java %}
public ArrayList<Circle> getCircles()
	{
		ArrayList<Circle> circles=new ArrayList<Circle>(100);
		Circle circle;
		nList = doc.getElementsByTagName("circle");
		for (int temp = 0; temp &lt; nList.getLength(); temp++)
		{</Circle></Circle></Circle></p>

<pre><code>		Node nNode = nList.item(temp);
		
		if (nNode.getNodeType() == Node.ELEMENT_NODE)
		{

			Element eElement = (Element) nNode;
			String cx = eElement.getAttribute("cx");
			String cy = eElement.getAttribute("cy");
			String r = eElement.getAttribute("r");
			circle=new Circle(cx, cy, r);
			circles.add(circle);
		}
	}
	return circles;
} {%endcodeblock%} 对于直线等其他的图形，也是同样的解析方式，只要把所有图形存下来就可以绘制了~~
</code></pre>
]]></content>
  </entry>
  
</feed>
